{
	"nodes":[
		{"id":"375dd576d540647f","type":"group","x":1000,"y":-1160,"width":1840,"height":3760,"label":"Newton Interpolation"},
		{"id":"8adace09c20f4fb4","type":"group","x":-960,"y":-1160,"width":1800,"height":2920,"label":"Lagrange interpolation"},
		{"id":"3e6f390ce9dd44d9","type":"text","text":"Inicializar array a interpolar\n```python\nx_interpolate = np.linspace(0, df['X'].max(), 200)\n```\nAsigna primer elemento a $x_i$ , con $i=0$\n\nInicializa array de interpolaciones\n```python\ninterpolated_values = []\n```\n\n\n","x":-309,"y":-160,"width":560,"height":340},
		{"id":"f0c6b84d4c6f373c","type":"text","text":"Inicializar interpolador de Newton\n\n```python\nnewton_interpolator = NewtonInterpolation(df)\n```","x":1610,"y":-360,"width":560,"height":140},
		{"id":"9813d841e47d15b8","type":"text","text":"Inicializar interpolador de Lagrange\n\n```python\nlagrange_interpolator = LagrangeInterpolation(df)\n```","x":-310,"y":-360,"width":560,"height":140},
		{"id":"23ed0fc07db5e61f","type":"text","text":"Inicializar Dataframe vacío\n```python\ninterpolation_df_lagrange = pd.DataFrame({'X': [], 'Y': []})\n```","x":-365,"y":-1040,"width":670,"height":140},
		{"id":"fccd8c4305134c91","type":"text","text":"Inicializar Dataframe vacío\n```python\ninterpolation_df_newton = pd.DataFrame({'X': [], 'Y': []})\n```","x":1555,"y":-1040,"width":670,"height":140},
		{"id":"1175a130399a8eaa","type":"text","text":"Graficar pares $(x_{interp}, y_{interp})$\n![[Pasted image 20231018174934.png]]","x":-840,"y":1240,"width":756,"height":340},
		{"id":"6db14e08e34f1f0b","type":"text","text":"Carga el valor $x_i$ en memoria","x":1743,"y":240,"width":295,"height":60},
		{"id":"039ba6f0acc6e8b0","type":"text","text":"Inicializar array a interpolar\n```python\nx_interpolate = np.linspace(0, df['X'].max(), 200)\n```\nAsigna primer elemento a $x_i$ , con $i=0$\n\nInicializa array de interpolaciones\n```python\ninterpolated_values = []\n```\n\n\n","x":1610,"y":-160,"width":560,"height":320},
		{"id":"c895b7b14e404000","type":"text","text":"Calcular el valor $\\hat y_i$ mediante la interpolación en $x_i$\n```python\ndef _calculate_interpolated_value(self, x_interp):\n\ty_interp = 0.0\n\t\n\tfor i in range(len(self.x_values)):\n\t\tterm = self.y_values[i]\n\t\tfor j in range(len(self.x_values)):\n\t\t\tif j != i:\n\t\t\t\tterm *= (x_interp - self.x_values[j]) / (self.x_values[i] - self.x_values[j])\n\t\ty_interp += term\n\n\treturn y_interp\n```\n\nDonde $\\hat{y}$ está dado por el poliomio de Lagrange evaluado en el punto $x_i$\n$$\nP_n(x) = \\sum_{i=0}^n f(x_i) \\prod_{j \\neq i} \\frac{x-x_j}{x_i-x_j}\n$$\n","x":-334,"y":360,"width":610,"height":600},
		{"id":"f96875c0c075717e","type":"text","text":"Notación en LaTex\n\n$$\nP_n(x) = -0.8889077915016421 + 0.12212104283847619 \\cdot (x - 4.236547993389047) + 0.45056404062235217 \\cdot (x - 4.236547993389047) \\cdot (x - 5.448831829968968) + -0.0888502758419502 \\cdot (x - 4.236547993389047) \\cdot (x - 5.448831829968968) \\cdot (x - 5.4881350392732475) + -0.022259327285359173 \\cdot (x - 4.236547993389047) \\cdot (x - 5.448831829968968) \\cdot (x - 5.4881350392732475) \\cdot (x - 6.027633760716439) + 0.0005956258419220329 \\cdot (x - 4.236547993389047) \\cdot (x - 5.448831829968968) \\cdot (x - 5.4881350392732475) \\cdot (x - 6.027633760716439) \\cdot (x - 7.151893663724195)\n$$\n\n```python\ndef latex_interpolation_expression(self):\n\texpression = r\"\"\n\tfor i in range(len(self.x_values)):\n\t\tterm = self.divided_differences[0][i]\n\t\tterm_str = str(term)\n\n\t\tfor j in range(i):\n\t\t\tterm_str += r\" \\cdot (x - \" + str(self.x_values[j]) + r\")\"\n\t\t\texpression += term_str\n\t\t\n\t\t\tif i < len(self.x_values) - 1:\n\t\t\t\texpression += r\" + \"\n\t\t\t\t\n\treturn expression\n```","x":1895,"y":2040,"width":865,"height":500},
		{"id":"e238ce389d6d8d31","type":"text","text":"Calcular las diferencias divididas de la función en el conjunto de puntos conocidos. La primera diferencia dividida se calcula como:\n\n$$\nf[x_i,x_{i+1}] = \\frac{f(x_{i+1}) - f(x_i)}{x_{i+1} - x_i}\n$$\n\ny las diferencias divididas de orden superior se calculan recursivamente como:\n\n$$\nf[x_i,x_{i+1},\\ldots,x_{i+k}] = \\frac{f[x_{i+1},\\ldots,x_{i+k}] - f[x_i,\\ldots,x_{i+k-1}]}{x_{i+k} - x_i}\n$$\n\n```python\ndef calculate_divided_differences(self):\n\tn = len(self.x_values)\n\tdivided_differences = [[0] * n for _ in range(n)]\n\tfor i in range(n):\n\t\tdivided_differences[i][0] = self.y_values[i]\n\tfor j in range(1, n):\n\t\tfor i in range(n - j):\n\t\t\tdivided_differences[i][j] = (divided_differences[i + 1][j - 1] - divided_differences[i][j - 1]) / (self.x_values[i + j] - self.x_values[i])\n\n  return divided_differences\n```","x":1503,"y":440,"width":777,"height":600},
		{"id":"88495ef0b0448106","type":"text","text":"Calcular $\\hat{y}$, que está dado por el poliomio de Lagrange evaluado en el punto $x_i$\n$$\nP_n(x) = f[x_0] + f[x_0,x_1](x-x_0) + f[x_0,x_1,x_2](x-x_0)(x-x_1) + \\cdots + f[x_0,x_1,\\ldots,x_n](x-x_0)(x-x_1)\\cdots(x-x_{n-1})\n$$\n\nCalcular el valor $\\hat y_i$ mediante la interpolación en $x_i$\n```python\ndef _calculate_interpolated_value(self, x_interp):\n\ty_interp = 0.0\n\t\n\tfor i in range(len(self.x_values)):\n\t\tterm = self.y_values[i]\n\t\tfor j in range(len(self.x_values)):\n\t\t\tif j != i:\n\t\t\t\tterm *= (x_interp - self.x_values[j]) / (self.x_values[i] - self.x_values[j])\n\t\ty_interp += term\n\n\treturn y_interp\n```\n\n","x":1502,"y":1160,"width":777,"height":600},
		{"id":"3c834e988b2312fa","type":"text","text":"$i = i + 1$","x":2440,"y":800,"width":116,"height":60},
		{"id":"3a3a2f9e3a8a6c5a","type":"text","text":"Carga el valor $x_i$ en memoria","x":-177,"y":240,"width":295,"height":60},
		{"id":"3be4bf1926c2d179","type":"text","text":"Graficar pares $(x_{interp}, y_{interp})$\n![[Pasted image 20231018195747.png]]","x":1080,"y":2120,"width":773,"height":340},
		{"id":"eef1dbf59fa28ac5","type":"text","text":"Notación en LaTex\n\n$$\nP(x)= -0.8889077915016421 \\cdot \\left(\\frac{x - 5.448831829968968}{4.236547993389047 - 5.448831829968968}\\right) \\cdot \\left(\\frac{x - 5.4881350392732475}{4.236547993389047 - 5.4881350392732475}\\right) \\cdot \\left(\\frac{x - 6.027633760716439}{4.236547993389047 - 6.027633760716439}\\right) \\cdot \\left(\\frac{x - 7.151893663724195}{4.236547993389047 - 7.151893663724195}\\right) \\cdot \\left(\\frac{x - 0.0}{4.236547993389047 - 0.0}\\right) + -0.7408624251622733 \\cdot \\left(\\frac{x - 4.236547993389047}{5.448831829968968 - 4.236547993389047}\\right) \\cdot \\left(\\frac{x - 5.4881350392732475}{5.448831829968968 - 5.4881350392732475}\\right) \\cdot \\left(\\frac{x - 6.027633760716439}{5.448831829968968 - 6.027633760716439}\\right) \\cdot \\left(\\frac{x - 7.151893663724195}{5.448831829968968 - 7.151893663724195}\\right) \\cdot \\left(\\frac{x - 0.0}{5.448831829968968 - 0.0}\\right) + -0.7138988058821344 \\cdot \\left(\\frac{x - 4.236547993389047}{5.4881350392732475 - 4.236547993389047}\\right) \\cdot \\left(\\frac{x - 5.448831829968968}{5.4881350392732475 - 5.448831829968968}\\right) \\cdot \\left(\\frac{x - 6.027633760716439}{5.4881350392732475 - 6.027633760716439}\\right) \\cdot \\left(\\frac{x - 7.151893663724195}{5.4881350392732475 - 7.151893663724195}\\right) \\cdot \\left(\\frac{x - 0.0}{5.4881350392732475 - 0.0}\\right) + -0.25277908150860606 \\dots)\n$$\n\n```python\ndef latex_interpolation_expression(self):\n\texpression = r\"\"\n\tfor i in range(len(self.x_values)):\n\t\tterm = self.divided_differences[0][i]\n\t\tterm_str = str(term)\n\n\t\tfor j in range(i):\n\t\t\tterm_str += r\" \\cdot (x - \" + str(self.x_values[j]) + r\")\"\n\t\t\texpression += term_str\n\t\t\n\t\t\tif i < len(self.x_values) - 1:\n\t\t\t\texpression += r\" + \"\n\t\t\t\t\n\treturn expression\n```","x":20,"y":1160,"width":780,"height":560},
		{"id":"7255ac9bc6088b6c","type":"text","text":"Nuevo valor (x,y)\n\n```python\n[State('x-input', 'value'),State('y-input', 'value')]\n```","x":-365,"y":-860,"width":670,"height":140},
		{"id":"b63cd5caa8c9ae7a","type":"text","text":"Actualizar df\n```python\nnew_data = {'X': [x_value], 'Y': [y_value]}\ndf = pd.concat([df, pd.DataFrame(new_data)], ignore_index=True)\n```","x":-365,"y":-680,"width":670,"height":160},
		{"id":"1eb32314c577d52b","type":"text","text":"Nuevo valor (x,y)\n\n```python\n[State('x-input', 'value'),State('y-input', 'value')]\n```","x":1555,"y":-860,"width":670,"height":140},
		{"id":"6bad806623e07f24","type":"text","text":"Actualizar df\n```python\nnew_data = {'X': [x_value], 'Y': [y_value]}\ndf = pd.concat([df, pd.DataFrame(new_data)], ignore_index=True)\n```","x":1555,"y":-640,"width":670,"height":160},
		{"id":"3c7a83ab94b4ae13","type":"text","text":"$i = i + 1$","x":360,"y":440,"width":116,"height":60}
	],
	"edges":[
		{"id":"a05aed1e4c66a9e3","fromNode":"9813d841e47d15b8","fromSide":"bottom","toNode":"3e6f390ce9dd44d9","toSide":"top"},
		{"id":"c991532752ade823","fromNode":"3e6f390ce9dd44d9","fromSide":"bottom","toNode":"3a3a2f9e3a8a6c5a","toSide":"top"},
		{"id":"a6c4fbb74da4c4ae","fromNode":"23ed0fc07db5e61f","fromSide":"bottom","toNode":"7255ac9bc6088b6c","toSide":"top"},
		{"id":"8d43466efe7f4c32","fromNode":"7255ac9bc6088b6c","fromSide":"bottom","toNode":"b63cd5caa8c9ae7a","toSide":"top"},
		{"id":"5d7144f980c7b607","fromNode":"b63cd5caa8c9ae7a","fromSide":"bottom","toNode":"9813d841e47d15b8","toSide":"top"},
		{"id":"078ce1f4219a6a8c","fromNode":"b63cd5caa8c9ae7a","fromSide":"right","toNode":"7255ac9bc6088b6c","toSide":"right","label":"+ (x,y)"},
		{"id":"d0c869adad75464a","fromNode":"3a3a2f9e3a8a6c5a","fromSide":"bottom","toNode":"c895b7b14e404000","toSide":"top"},
		{"id":"f25f1ebd7ffdd0f4","fromNode":"c895b7b14e404000","fromSide":"bottom","toNode":"1175a130399a8eaa","toSide":"top"},
		{"id":"642733403e85d722","fromNode":"c895b7b14e404000","fromSide":"bottom","toNode":"eef1dbf59fa28ac5","toSide":"top"},
		{"id":"d76c1ee72111b183","fromNode":"039ba6f0acc6e8b0","fromSide":"bottom","toNode":"6db14e08e34f1f0b","toSide":"top"},
		{"id":"21346d574f38bfe5","fromNode":"f0c6b84d4c6f373c","fromSide":"bottom","toNode":"039ba6f0acc6e8b0","toSide":"top"},
		{"id":"a7c517fefbca7b7a","fromNode":"1eb32314c577d52b","fromSide":"bottom","toNode":"6bad806623e07f24","toSide":"top"},
		{"id":"cbe70961d91616ab","fromNode":"fccd8c4305134c91","fromSide":"bottom","toNode":"1eb32314c577d52b","toSide":"top"},
		{"id":"ece3f3420853b71c","fromNode":"6bad806623e07f24","fromSide":"right","toNode":"1eb32314c577d52b","toSide":"right","label":"+ (x,y)"},
		{"id":"2ab5ff06d43c52b1","fromNode":"6bad806623e07f24","fromSide":"bottom","toNode":"f0c6b84d4c6f373c","toSide":"top"},
		{"id":"926427067350b874","fromNode":"6db14e08e34f1f0b","fromSide":"bottom","toNode":"e238ce389d6d8d31","toSide":"top"},
		{"id":"9fc75d1c3fc8e628","fromNode":"e238ce389d6d8d31","fromSide":"bottom","toNode":"88495ef0b0448106","toSide":"top"},
		{"id":"ff8bf4e7ba88f029","fromNode":"88495ef0b0448106","fromSide":"right","toNode":"3c834e988b2312fa","toSide":"bottom"},
		{"id":"d2855ff1c28533dd","fromNode":"3c834e988b2312fa","fromSide":"top","toNode":"6db14e08e34f1f0b","toSide":"right"},
		{"id":"fb250f0b696fb9b7","fromNode":"c895b7b14e404000","fromSide":"right","toNode":"3c7a83ab94b4ae13","toSide":"bottom"},
		{"id":"bb49e4b8ad244537","fromNode":"3c7a83ab94b4ae13","fromSide":"top","toNode":"3a3a2f9e3a8a6c5a","toSide":"right"},
		{"id":"b93a2ec5a755b084","fromNode":"88495ef0b0448106","fromSide":"bottom","toNode":"3be4bf1926c2d179","toSide":"top"},
		{"id":"c5ae430f49c0e3b8","fromNode":"88495ef0b0448106","fromSide":"bottom","toNode":"f96875c0c075717e","toSide":"top"}
	]
}